# -*- coding: utf-8 -*-
# =====================================================================================================================
# These bindings were automatically generated by cyWrap. Please do dot modify.
# Additional functionality shall be implemented in sub-classes.
#
__copyright__ = "Copyright 2016 EPFL BBP-project"
# =====================================================================================================================
from cython.operator cimport dereference as deref
from libcpp cimport bool
cimport boost_numeric_ublas
cimport hadoken_geometry
cimport std


# ======================================================================================================================
cdef extern from "morpho/morpho_tree.hpp" namespace "morpho":
# ----------------------------------------------------------------------------------------------------------------------
    ctypedef boost_numeric_ublas.matrix[double] mat_points
    ctypedef boost_numeric_ublas.vector_range[mat_points] vec_double_range
    ctypedef boost_numeric_ublas.vector[double] vec_double
    ctypedef boost_numeric_ublas.matrix_range[vec_double] mat_range_points

    #ctypedef boost_numeric_ublas.range range
    ctypedef hadoken_geometry.point3d point
    ctypedef hadoken_geometry.vector3d vector
    ctypedef hadoken_geometry.linestring3d linestring
    ctypedef hadoken_geometry.sphere3d sphere
    ctypedef hadoken_geometry.circle3d circle
    ctypedef hadoken_geometry.cone3d cone
    ctypedef std.vector[circle] circle_pipe
    ctypedef hadoken_geometry.box3d box

    cpdef enum branch_type:
        soma = 0
        axon = 1
        dentrite_basal = 2
        dentrite_apical = 3
        unknown = 4

    ###### Cybinding for class morpho_node ######
    cdef cppclass morpho_node:
        morpho_node(branch_type)
        branch_type get_type()

    ###### Cybinding for class branch ######
    cdef cppclass branch:
        branch(branch_type)
        void set_points(mat_points&&, vec_double&&)
        mat_points& get_points()
        #vec_double& get_distances()
        std.size_t get_size()
        point get_point(std.size_t)
        box get_bounding_box()
        cone get_segment(std.size_t)
        box get_segment_bounding_box(std.size_t)
        sphere get_junction(std.size_t)
        box get_junction_sphere_bounding_box(std.size_t)
        linestring get_linestring()
        circle_pipe get_circle_pipe()
        std.vector[std.size_t] get_childrens()
        std.size_t get_parent()
        std.size_t get_id()

    ###### Cybinding for class branch_soma ######
    cdef cppclass branch_soma:
        branch_soma()
        sphere get_sphere()
        box get_bounding_box()

    ###### Cybinding for class morpho_tree ######
    cdef cppclass morpho_tree:
        morpho_tree()
        morpho_tree(morpho_tree)
        std.size_t set_root(std.unique_ptr[branch]&&)
        std.size_t add_child(std.size_t, std.unique_ptr[branch]&&)
        branch get_branch(std.size_t)
        box get_bounding_box()
        std.size_t get_tree_size()
        void add_flag(int)
        int get_flags()
        void swap(morpho_tree&)



# --> Mesher has no implementation!
## ======================================================================================================================
#cdef extern from "morpho/morpho_mesher.hpp" namespace "morpho":
## ----------------------------------------------------------------------------------------------------------------------
#
#    ###### Cybinding for class morpho_mesher ######
#    cdef cppclass morpho_mesher:
#        enum mesh_tag:
#            pass
#
#        morpho_mesher(std.shared_ptr[morpho_tree], std.string)
#        void set_mesh_tag(morpho_mesher.mesh_tag, bool)
#        void set_error_bound(double)
#        void set_face_size(double)
#        void execute()

# --> morpho_transform_filters has no implementation!
## ======================================================================================================================
#cdef extern from "morpho/morpho_transform_filters.hpp" namespace "morpho":
## ----------------------------------------------------------------------------------------------------------------------
#
#    ###### Cybinding for class filter_duplicate_point_operation ######
#    cdef cppclass filter_duplicate_point_operation:
#        filter_duplicate_point_operation(double)

# --> morpho_spatial without implementation
## ======================================================================================================================
#cdef extern from "morpho/morpho_spatial.hpp" namespace "morpho":
## ----------------------------------------------------------------------------------------------------------------------
#
#    ###### Cybinding for class spatial_index ######
#    cdef cppclass spatial_index:
#        spatial_index()
#        void add_morpho_tree(std.shared_ptr[morpho_tree])
#        bool is_within(int)


## ======================================================================================================================
#cdef extern from "morpho/morpho_transform.hpp" namespace "morpho":
## ----------------------------------------------------------------------------------------------------------------------
#
#    ###### Cybinding for class morpho_operation ######
#    cdef cppclass morpho_operation:
#        morpho_operation()
#        morpho_tree apply(morpho_tree)
#        std.string name()
#
#    ###### Cybinding for class morpho_operation_chain ######
#    cdef cppclass morpho_operation_chain:
#        morpho_operation_chain()
#        void append(morpho_operation*)
#        morpho_operation get(std.size_t)
#        std.size_t size()
